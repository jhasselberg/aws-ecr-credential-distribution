apiVersion: v1
kind: Secret
metadata:
  name: ecr-registry-helper-secrets
  namespace: default
stringData:
  AWS_SECRET_ACCESS_KEY: <AWS_SECRET_ACCESS_KEY>
  AWS_ACCESS_KEY_ID: <AWS_ACCESS_KEY_ID>
  AWS_ACCOUNT: <AWS_ACCOUNT>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecr-registry-helper-cm
  namespace: default
data:
  AWS_REGION: "eu-central-1"
  DOCKER_SECRET_NAME: "ecr-regcred"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-registry-helper
  namespace: default
spec:
  schedule: "0 */10 * * *"
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sa-ecr-credentials
          containers:
          - name: ecr-registry-helper
            image: docker.io/jnhssg/aws-kubectl-arm:latest
            imagePullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: ecr-registry-helper-secrets
              - configMapRef:
                  name: ecr-registry-helper-cm
            command:
              - /bin/sh
              - -c
              - |-
                ECR_TOKEN=`aws ecr get-login-password --region ${AWS_REGION}`
                kubectl delete clusterpullsecret --ignore-not-found ecr-registrycreds -n default
                kubectl delete secret --ignore-not-found $DOCKER_SECRET_NAME -n default
                kubectl create secret docker-registry $DOCKER_SECRET_NAME \
                --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
                --docker-username=AWS \
                --docker-password="${ECR_TOKEN}" \
                --namespace=$NAMESPACE_NAME
                kubectl apply -f - <<EOF
                apiVersion: ops.alexellis.io/v1
                kind: ClusterPullSecret
                metadata:
                  name: ecr-registrycreds
                spec:
                  secretRef:
                    name: ecr-regcred
                    namespace: default
                EOF
          restartPolicy: Never
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-ecr-credentials
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: default
  name: role-full-access-to-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["ecr-regcred"]
  verbs: ["delete"]
- apiGroups: ["ops.alexellis.io"]
  resources: ["clusterpullsecrets"]
  verbs: ["delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
- apiGroups: ["ops.alexellis.io"]
  resources: ["clusterpullsecrets"]
  verbs: ["get"]
- apiGroups: ["ops.alexellis.io"]
  resources: ["clusterpullsecrets"]
  verbs: ["create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: sa-ecr-credentials-role-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: sa-ecr-credentials
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: role-full-access-to-secrets
  apiGroup: ""
---